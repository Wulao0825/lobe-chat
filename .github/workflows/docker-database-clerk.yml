name: Publish Database Docker Clerk Image  # 工作流名称，便于在 GitHub Actions 中区分

on:
  workflow_dispatch:  # 允许在GitHub Actions界面中手动触发
  release:
    types: [published]  # 当发布新版本(Release)时自动触发

jobs:
  push_to_registry:
    name: Push Docker image to Private Docker Hub - wulao/lobechat
    runs-on: ubuntu-latest  # 使用GitHub提供的ubuntu-latest环境作为运行环境

    steps:
      # --------------------【步骤0】：检出仓库代码 -------------------------
      - name: Check out the repo
        uses: actions/checkout@v4
        # 说明：将当前GitHub仓库的代码检出到工作流所在的虚拟机环境中。
        #       这样后续步骤才能读取文件（包括 .build_docker_clerk、Dockerfile.clerk 等）。

      # --------------------【步骤1】：读取.build_docker_clerk文件 -------------------------
      - name: Read .build_docker_clerk
        id: read_flag
        run: |
          # 如果 .build_docker_clerk 文件不存在，则创建并写入"0"（表示不触发构建）。
          if [ ! -f ./.build_docker_clerk ]; then
            echo "0" > ./.build_docker_clerk
          fi

          # 读取其中的值并存储到 GitHub Actions 的输出变量里，供后续步骤使用
          build_flag=$(cat ./.build_docker_clerk)
          echo "build_docker_clerk_flag=$build_flag" >> $GITHUB_OUTPUT

      # --------------------【步骤2】：登录 Docker Hub（受条件限制，仅当build_docker_clerk_flag == 1时执行） -------------------------
      - name: Log in to Docker Hub
        if: steps.read_flag.outputs.build_docker_clerk_flag == '1'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
        # 说明：此步骤会在“build_docker_clerk_flag == 1”时才执行，
        #       即 .build_docker_clerk 文件中写了“1”，才会登录到 Docker Hub。
        #       DOCKER_REGISTRY_USER 和 DOCKER_REGISTRY_PASSWORD 需要在 GitHub 仓库中
        #       “Settings” -> “Secrets and variables” -> “Actions” 中配置。

      # --------------------【步骤3】：生成 Docker 镜像标签与元数据（同样受条件限制） -------------------------
      - name: Extract metadata (tags, labels) for Docker
        if: steps.read_flag.outputs.build_docker_clerk_flag == '1'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: wulao/lobechat  # 替换为你自己的Docker Hub仓库名称
          tags: |
            type=raw,value=latest
            type=ref,event=tag
        # 说明：
        # - `type=raw,value=latest` 会强制生成一个 "latest" 标签。
        # - `type=ref,event=tag` 如果是基于Git标签触发(例如发布版本时)，
        #   则会自动生成与Git标签同名的Docker镜像标签（如 v1.0.0）。

      # --------------------【步骤4】：启用 QEMU（支持多架构构建，受条件限制） -------------------------
      - name: Set up QEMU
        if: steps.read_flag.outputs.build_docker_clerk_flag == '1'
        uses: docker/setup-qemu-action@v3
        # 说明：安装并启用 QEMU，用以支持交叉构建（如 x86_64、ARM64 等不同架构）。
        #       如果只构建单一架构可以不启用，但多数情况下保留多架构支持更灵活。

      # --------------------【步骤5】：设置 Docker Buildx（受条件限制） -------------------------
      - name: Set up Docker Buildx
        if: steps.read_flag.outputs.build_docker_clerk_flag == '1'
        uses: docker/setup-buildx-action@v3
        # 说明：启用 Docker Buildx，用于多架构构建以及更高级的构建功能（如缓存）。

      # --------------------【步骤6】：构建并推送 Docker 镜像（受条件限制） -------------------------
      - name: Build and push Docker image
        if: steps.read_flag.outputs.build_docker_clerk_flag == '1'
        uses: docker/build-push-action@v5
        with:
          context: .  # 构建上下文为整个仓库根目录，里面应包含 Dockerfile.clerk
          file: ./Dockerfile.clerk  # 指定要使用的 Dockerfile 路径
          platforms: linux/amd64,linux/arm64  # 同时构建 x86_64 和 ARM64 架构的镜像
          push: true  # 构建完成后自动推送到 Docker Registry
          tags: ${{ steps.meta.outputs.tags }}    # 继承自 metadata-action，自动生成 Docker 标签
          labels: ${{ steps.meta.outputs.labels }}# 继承自 metadata-action，自动生成 Docker 镜像元数据标签
          cache-from: type=gha  # 启用从 GitHub Actions 缓存中拉取构建缓存，减少重复构建时间
          cache-to: type=gha,mode=max  # 启用将构建缓存存储到 GitHub Actions，方便后续使用
          build-args: |
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
            CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }}
        # 说明：
        # - 多架构构建可以一次性生成适配不同平台的镜像。
        # - 推送后可在 Docker Hub 私有仓库中查看 wulao/lobechat:latest（或其他标签）的镜像。
        # - 只有当 .build_docker_clerk 的值为 "1" 时，这些核心构建推送步骤才会执行。
        # - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY、CLERK_SECRET_KEY、CLERK_WEBHOOK_SECRET 同样需要在“Settings” -> “Secrets and variables” -> “Actions” 中配置。
        # 目前Dockerfile.clerk中 CLERK_SECRET_KEY、CLERK_WEBHOOK_SECRET 的 ENV 是注释的
