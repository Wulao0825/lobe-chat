name: Check Lobe-Chat Release

on:
  schedule:
    - cron: '0 * * * *'   # 每小时执行一次
  workflow_dispatch:

# 给当前仓库的 Actions “写权限”
permissions:
  contents: write

jobs:
  check-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: true  # 允许使用 GITHUB_TOKEN 推送到当前仓库

      - name: Get latest release of lobehub/lobe-chat
        id: get_release
        run: |
          # 用 GitHub API 获取最新 tag
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/lobehub/lobe-chat/releases/latest" | jq -r '.tag_name')
          echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Compare with previous release
        id: compare_release
        run: |
          LATEST_RELEASE="${{ steps.get_release.outputs.latest_release }}"
          echo "Latest release in lobehub/lobe-chat: $LATEST_RELEASE"

          PREV_RELEASE="unknown"
          if [ -f .last_release ]; then
            PREV_RELEASE=$(cat .last_release)
          fi
          echo "Previous release: $PREV_RELEASE"

          if [ "$LATEST_RELEASE" != "$PREV_RELEASE" ]; then
            echo "Detected a new release!"
            echo "$LATEST_RELEASE" > .last_release
            echo "UPDATED=true" >> $GITHUB_ENV
          else
            echo "No new release found."
            echo "UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Commit and push .last_release
        # 只有在 compare_release 步骤中标记 UPDATED=true 才执行
        if: env.UPDATED == 'true'
        run: |
          # 配置 Git 用户信息
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 加入暂存区
          git add .last_release

          # 判断是否有改动
          if git diff --cached --exit-code; then
            echo "No changes to commit."
            git commit -m "chore: update .build_docker_clerk with new release: 0"
            git push
          else
            git commit -m "chore: update .last_release with new release: ${{ steps.get_release.outputs.latest_release }}"
            git push
            git commit -m "chore: update .build_docker_clerk with new release: 1"
            git push
          fi
